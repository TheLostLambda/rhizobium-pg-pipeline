* Analysis Steps
  1) Clone the [[https://github.com/Mesnage-Org/pgfinder][pgfinder]] repository, stripping out everything but the ~pgfinder~
     directory and the ~demo_ftrs.py~
  2) Store the monomer CSV file and MS data in the ~Data/Inputs~ folder
  3) Update the ~*_filepath~ variables in ~demo_ftrs.py~ – optionally renaming
     the file
  4) Adjust the modifications included in the search-space (edit the ~mod_test~
     variable)
  5) Add a CSV export to the demo script, replacing ~print(results)~ with
     ~results.to_csv("Data/Outputs/ms1.csv")~
  6) Run the PGFinder script    
  7) Use the Julia REPL and ~Analysis.jl~ to pull out any structures of interest
     into ~Data/Outputs/selected_structures.csv~
  8) Separate the dimers in the selected structures with ~=~ instead of
     ~-~. This is a temporary work-around while I wait for an updated MS1
     program
  9) Create the ~Data/Outputs/Graphs/~ directory
  10) Build the graphs with ~python Scripts/build_graphs.py
      Data/Outputs/selected_structures.csv Data/Outputs/Graphs/~
* Results
** Finding GM-AEJA-GM-AEJ
#+BEGIN_SRC julia
julia> summarise(find_structure(df, "GM-AEJA-GM-AEJ"))
3×4 DataFrame
 Row │ ionCount  rt       mwMonoisotopic  inferredStructure                 
     │ Int64     Float64  Float64         String                            
─────┼──────────────────────────────────────────────────────────────────────
   1 │        9  16.8543         1793.77  GM-AEJ-GM-AEJA|2,GM-AEJA-GM-AEJ|2
   2 │       18  14.3089         1793.77  GM-AEJ-GM-AEJA|2,GM-AEJA-GM-AEJ|2
   3 │      225  14.9381         1793.77  GM-AEJ-GM-AEJA|2,GM-AEJA-GM-AEJ|2
#+END_SRC
** Finding GM-AEJA
#+BEGIN_SRC julia
julia> summarise(find_structure(ms, "GM-AEJA"))
4×4 DataFrame
 Row │ ionCount  rt        mwMonoisotopic  inferredStructure 
     │ Int64     Float64   Float64         String            
─────┼───────────────────────────────────────────────────────
   1 │      425   9.46591         941.408  GM-AEJA|1
   2 │        3  11.8849          941.407  GM-AEJA|1
   3 │       10  12.348           941.409  GM-AEJA|1
   4 │       12  19.6284          941.4    GM-AEJA|1
#+END_SRC
** Hydrogen Location in GM-AEJA
*** On the GlcNAc
#+BEGIN_SRC python
{('A5',): 50, ('J4',): 88, ('A2', 'E3'): 40, ('J4', 'A5'): 88, ('M1',): 88,
('E3', 'J4'): 88, ('J4', 'E3'): 88, ('M1', 'A2'): 88, ('M1', 'A2', 'E3', 'J4',
'A5'): 86, ('A2', 'E3', 'J4'): 88, ('E3', 'J4', 'A5'): 88, ('A2', 'E3', 'J4',
'A5'): 81, ('M1', 'A2', 'E3'): 52, ('M1', 'A2', 'E3', 'J4'): 49, ('G0', 'M1',
'A2', 'E3'): 9, ('G0',): 15, ('G0', 'M1', 'A2'): 1, ('E3',): 5, ('M1', 'G0'): 1,
('G0', 'M1'): 1}
#+END_SRC
*** On the Terminal (H_{2}O)
#+BEGIN_SRC python
{('J4',): 88, ('A2', 'E3'): 40, ('G0',): 88, ('A2', 'E3', 'J4', 'A5'): 137, ('M1',): 88, ('E3', 'J4'): 88, ('A2', 'M1'): 88, ('M1', 'A2'): 88, ('A2', 'E3', 'J4'): 88, ('M1', 'A2', 'E3'): 52, ('M1', 'A2', 'E3', 'J4'): 49, ('G0', 'M1', 'A2', 'E3'): 10, ('M1', 'A2', 'E3', 'J4', 'A5'): 85, ('E3', 'J4', 'A5'): 80, ('G0', 'M1', 'A2'): 3, ('A5', 'J4'): 78, ('J4', 'A5'): 78, ('G0', 'M1', 'A2', 'E3', 'J4'): 6, ('G0', 'M1'): 20, ('E3',): 5}
#+END_SRC
*** Summary
#+BEGIN_SRC julia
julia> summarise_ms2("Data/Outputs/MS2/GM-AEJA (Protonless)/")
Matched Scans: 88
Average Percent Observed: 62.84%
Total Fragments Observed: 19 of 20
Coverage Percent: 61.7%

julia> summarise_ms2("Data/Outputs/MS2/GM-AEJA/")
Matched Scans: 88
Average Percent Observed: 62.10%
Total Fragments Observed: 18 of 20
Coverage Percent: 58.18%

julia> summarise_ms2("Data/Outputs/MS2/GM-AEJA (GlcNAc + H)")
Matched Scans: 88
Average Percent Observed: 57.10%
Total Fragments Observed: 18 of 20
Coverage Percent: 56.14%

julia> summarise_ms2("Data/Outputs/MS2/GM-AEJA (mDAP + H)")
Matched Scans: 88
Average Percent Observed: 55.11%
Total Fragments Observed: 18 of 20
Coverage Percent: 51.48%
#+END_SRC
* Questions
  1) Has the MS1 program actually been updated to use the = and ~ operators?
  2) Where are the RAW files for XCalibur?
  3) How exactly do I confirm MS2 fragments using XCalibur?
  4) Getting this error (Feedback from Ankur?):
     #+BEGIN_SRC python
     Charge_Mono_Caller.py:77: RuntimeWarning: invalid value encountered in true_divide
     t_product /= t_product.max()
     #+END_SRC
* Ideas
  - A scoring metric for the fragmentation could be the total number of fragment
    matches across all scans divided by the number of fragmentations. The "On
    the GlcNAc" result would have a 12.43 and the "On the Terminal (H_{2}O)" would
    be 14.31. This is like an average "cover depth" – the average number of
    times each theoretical fragment is observed
* Tasks
** TODO MS1 Output Needs Scan Number Outputs
   - Pull out XIC start / end
   - FTRS is SQL, match the RT of ChargeClusters with the xicStart and end from
     Features
   - In the RT range, filter for matched monoisotopic masses
   - Add a function after the ~ftrs_reader~ file in matching.py to do the
     sorting ~get_scan_ftrs~
   - Just need a start and end scan number (a window)
   - In Byspec2 file, Spectra table has Parent Scan Number
   - In MS2 output, sort scan numbers in to folders that are named according to
     the parent scan number
** DONE Improve Multimer Builder
   CLOSED: [2021-08-30 Mon 21:34]
   - Read data from file(s)
   - Make sure that the new === and =~= terminology is working
   - *CHECK THAT GLYCO ACTUALLY WORKS!*
** TODO Fix the generation of 3-4 bonded graphs
   - It looked like I might have a but where 3-3 bonding is present in 3-4 files?
** TODO Fix MS2 Ion Generation
   - Glycan fragmentation results in oxonium ion formation, so I don't need to
     add the mass of a proton when a terminal contains a glycan fragment
   - I need to sort fragments based on whether they end in a peptide or glycan?
** TODO Improve MS2 Scanning Performance
   - Parallelise searching for parent ions using Pool.map
